# .env
OPENAI_API_KEY=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

---

# requirements.txt
flask
flask-cors
requests
python-dotenv
PyDrive

---

# setup_env.sh
#!/bin/bash

python3 -m venv .venv
source .venv/bin/activate
pip install --upgrade pip
pip install -r requirements.txt

if [ ! -f .env ]; then
  echo "OPENAI_API_KEY=sk-..." > .env
  echo ".env creato. Inserisci la tua chiave."
fi

echo "âœ… Ambiente pronto. Ora puoi eseguire:"
echo "python3 deepseek_middleware.py"

---

# safe_openai_utils.py
import os
import requests

CHATGPT_ENDPOINT = "https://api.openai.com/v1/chat/completions"


def safe_openai_fallback(prompt, model="gpt-4"):
    api_key = os.getenv("OPENAI_API_KEY")
    headers = {"Authorization": f"Bearer {api_key}"}
    payload = {
        "model": model,
        "messages": [
            {"role": "system", "content": "Sei un assistente AI con contesto persistente."},
            {"role": "user", "content": prompt}
        ]
    }
    try:
        response = requests.post(CHATGPT_ENDPOINT, headers=headers, json=payload, timeout=15)
        data = response.json()
        return data.get("choices", [{}])[0].get("message", {}).get("content", "[GPT fallback error: risposta vuota]")
    except Exception as e:
        return f"[ERROR] Nessuna risposta valida da ChatGPT fallback: {e}"
